<ManagementPackFragment SchemaVersion="2.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><TypeDefinitions>
    <ModuleTypes>
      <!-- DataSource.PSRegCheckRegValue.PropertyBag -->
      <DataSourceModuleType ID="GripLogix.McAfee.DataSource.Condition.PSRegCheckRegValue.PropertyBag" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="RegKeyPath" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="RegValue" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Threshold" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Debug" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="RegKeyPath" Selector="$Config/RegKeyPath$" ParameterType="string" />
          <OverrideableParameter ID="RegValue" Selector="$Config/RegValue$" ParameterType="string" />
          <OverrideableParameter ID="Threshold" Selector="$Config/Threshold$" ParameterType="int" />
          <OverrideableParameter ID="Debug" Selector="$Config/Debug$" ParameterType="bool" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Schedule" TypeID="System!System.SimpleScheduler">
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime>$Config/SyncTime$</SyncTime>
              </DataSource>
              <ProbeAction ID="Script" TypeID="GripLogix.McAfee.Probe.PSRegCheckRegValue">
                <RegKeyPath>$Config/RegKeyPath$</RegKeyPath>
                <RegValue>$Config/RegValue$</RegValue>
                <Debug>$Config/Debug$</Debug>
              </ProbeAction>
              <ConditionDetection ID="CD" TypeID="System!System.ExpressionFilter">
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="Integer">Property[@Name='$Config/RegValue$']</XPathQuery>
                    </ValueExpression>
                    <Operator>Less</Operator>
                    <ValueExpression>
                      <Value Type="Integer">$Config/Threshold$</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="CD">
                <Node ID="Script">
                  <Node ID="Schedule" />
                </Node>
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <!-- Probe.PSRegCheckRegValue -->
      <ProbeActionModuleType ID="GripLogix.McAfee.Probe.PSRegCheckRegValue" Accessibility="Internal" Batching="false" PassThrough="false">
        <Configuration>
          <xsd:element name="RegKeyPath" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="RegValue" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Debug" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <ProbeAction ID="Script" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                <ScriptName>McAfeeCheckRegValue.ps1</ScriptName>
                <ScriptBody>## Author: Merijn Overgaauw, GripLogix Consulting

# Get parameters
param($regKeyPath, $regValue, $debug)

# Constants used for event logging
$SCRIPT_NAME			= 'CheckRegValue.ps1'
$EVENT_LEVEL_ERROR 		= 1
$EVENT_LEVEL_WARNING 	= 2
$EVENT_LEVEL_INFO 		= 4

$SCRIPT_STARTED			= 941
$PROPERTYBAG_CREATED	= 942
$ERROR_GENERATED        = 943
$SCRIPT_ENDED			= 945

#==================================================================================
# Sub:		LogDebugEvent
# Purpose:	Logs an informational event to the Operations Manager event log
#			only if Debug argument is true
#==================================================================================
Function Log-DebugEvent
{
	param($eventNo,$message)

	$message = "`n" + $message
	if ($debug -eq $true)
	{
		$api.LogScriptEvent($SCRIPT_NAME,$eventNo,$EVENT_LEVEL_INFO,$message)
	}
}
#=====================================================================================
# Convert epoch timestamp into human timestamp.
Function get-epochdate ($epochdate) { [timezone]::CurrentTimeZone.ToLocalTime(([datetime]'1/1/1970').AddSeconds($epochdate)) }
#=====================================================================================

# Start script by setting up API object.
$api = New-Object -comObject 'MOM.ScriptAPI'
$message = "Script started with parameters $regKeyPath, $regValue, $debug"
Log-DebugEvent $SCRIPT_STARTED $message

# Get regValue data.
Try {$regData = Get-ItemProperty -path $regKeyPath -ErrorAction Stop}
Catch 
	{
		$errorMessage = "Get-ItemProperty for $regKeyPath failed`nError: $_."
		Log-DebugEvent $ERROR_GENERATED $errorMessage
	}

$regValueData = $regData."$regValue"
$error = "-"
If ($regValueData -eq "") {$regValueData = 0}
If ($regValueData -eq $null) {$regValueData = -999; $error = "ERROR: Registry Value object does not exist!"}
	
# Put the gathered data into the property bag.
$bag = $api.CreatePropertyBag()
$bag.AddValue($regValue,$regValueData)
$bag.AddValue('Error',$error)

$message = "Property bag created.
	$regValue : $regValueData
	Error : $error"
Log-DebugEvent $PROPERTYBAG_CREATED $message

$bag
$message = "Script ended $regKeyPath, $regValue, $debug"
Log-DebugEvent $SCRIPT_ENDED $message</ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>RegKeyPath</Name>
                    <Value>$Config/RegKeyPath$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>RegValue</Name>
                    <Value>$Config/RegValue$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>Debug</Name>
                    <Value>$Config/Debug$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>300</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="Script" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
        <TriggerOnly>true</TriggerOnly>
      </ProbeActionModuleType>
    </ModuleTypes>
  </TypeDefinitions></ManagementPackFragment>
